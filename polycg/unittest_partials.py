import numpy as np
import scipy as sp
from scipy import sparse
import sys, time
from matplotlib import pyplot as plt


from typing import List, Tuple, Callable, Any, Dict
from .cgnaplus import cgnaplus_bps_params

from .Transforms.transform_cayley2euler import *
from .Transforms.transform_marginals import *
from .Transforms.transform_statevec import *
from .Transforms.transform_algebra2group import *
from numba import njit

from .composites import *
from .partials import partial_stiff



def test_partials(seq):
    
    np.set_printoptions(linewidth=250, precision=5, suppress=True)
    
    method = cgnaplus_bps_params
    stiffgen_args = {'translations_in_nm': True, 'euler_definition': False, 'group_split' : False}
    gs,stiff = partial_stiff(seq,method,stiffgen_args,block_size=100,overlap_size=20,tail_size=20,closed=False,ndims=6)
    
    st = stiff.to_sparse()
    
    print(st[:6,:6])
    
    sys.exit()
    
    print('#######################')
    print(stiff[24:36,24:36])
    print(gs[24:36])
    
    method = cgnaplus_bps_params
    stiffgen_args = {'translations_in_nm': True, 'euler_definition': True, 'group_split' : False}
    gs,stiff = partial_stiff(seq,method,stiffgen_args,block_size=100,overlap_size=20,tail_size=20,closed=False,ndims=6)
    print('#######################')
    print(stiff[24:36,24:36])
    print(gs[24:36])
    
    method = cgnaplus_bps_params
    stiffgen_args = {'translations_in_nm': True, 'euler_definition': True, 'group_split' : True}
    gs,stiff = partial_stiff(seq,method,stiffgen_args,block_size=100,overlap_size=20,tail_size=20,closed=False,ndims=6)
    print('#######################')
    print(stiff[24:36,24:36])
    print(gs[24:36])
    
    sys.exit()

    


    
    gs = gs.reshape((len(gs)//6,6))
    print(gs.shape)
    print(gs[0])
    
    
    
    
    
    
    # spstiff = csc_matrix(stiff.to_array(),shape=stiff.shape)
    
    from time import time
    
    
    N = 10
    t1 = time()
    for i in range(N):
        spstiff = stiff.to_sparse_csc()
    t2 = time()
    print(f'csc: {t2-t1}')
    t1 = time()
    for i in range(N):
        spstiff = stiff.to_sparse_csr()
    t2 = time()
    print(f'csr: {t2-t1}')
    t1 = time()
    for i in range(N):
        spstiff = stiff.to_sparse_lil()
    t2 = time()
    print(f'lil: {t2-t1}')
    
    
    
    
    s1 = spstiff.toarray()
    
    s2 = stiff.to_array()
    
    print(f'diff = {np.sum(s1-s2)}')
    
    # print(s1)
    # print(s2)

    
    
    # print(stiff.shape)
    # print(stiff[600:606,600:606])

    # gs,stiff = cgnaplus_bps_params(seq[80:121])
    # print(stiff[120:126,120:126])

    # print(seq[100:110])



if __name__ == "__main__":
    
    nbp = 101
    baseseq = 'ATATGTCGGAGAGACCAAAGTAGGCATTTGTCAGGGGCACGAGAGCCACGTATACAATGCCCGACCAGTCAGCTCCTTCTGTCCACGGGGTAATGCCGCCAGTGTTTAGTCCTGTATAACTTGGACCATTGCTAGATAGTTCCCCTCCTTCGTTAACCTTAATCTCTCCAGGAACTCAATATGATGCGTGTGTTGCAGGCTAGCAAAATAGAGAAAATGATTCTAAACTGGGAAGGAATCGGGTCCTAACTGCCCTGTCGTGAGAACGACCTTTGATATTAGTTCTTTTCTACGAACAATGAGTAGGTACCCCGGCATATCGAACCGTTATTGTAATCTCTTTATCAGCACCTACCGTAGCCATGGCCGGACCTGTTGCGATTTGACTGAAAATGCATTATACTTTTCTATACTGTAGAGTAGTATCGATACGTCCCCTAAGAAAAGCACGTCTATGTGGCCTCGCGACGTCAATAGCTGTTGTTAAACTACCACATGAACACTGTTCCCCACGCCCGTAATCGCGTGTGGTATCGTCCAGCTTCCAGGCCTGACGTCCTGCGAGATGCCCTCAGGGAATGATACCACCTAATCACCGAGGTCCGCTAATCGGCGTTTTTGTTACGCCAGTGTCAGGCAATACAACTGGCGAATGATCTCGCGGTTCAAATTAACCTCCCACATCCGATTGTATCCGGTCACTGGACGTTAACCTGCAAGGGGGACGGCTGATAAGCAAAAAGCTCCAGATGAGGACATTCTGAATAAATCGAGTTTGGCGAAACGTTTCAAGTATATGGAGACAATGGGTGCCCTTCTAACAATCCAGTTTGCACAATTTAGGGGCCCCCTCCCGGTTGTTAAATGCGACTCCTGCTTGTCATTAGAGATAACACCCGAAGGTGATGCTCGTCGGTTGTGTTGAGTCATTTGTCCCTGAATCGGGAGGCGGGAGAGTACTGTAACAGCGTATTTACAACCAGAGGTCACTTACGGTGGAACACTAAGTACCAACAGAGTGAAGTTGTAAGTGTTACGAAAGTAACGATAGCAGTGCTAAGAGCATCAAAGTAGATGGCGGAACTCGCATAGTAGGTAGATCCACAACGTGCATAGACAATATGTACAATTCCGACTTCTTTCATTGGGGATGCGTGGGTAGAGACTCCTCTCCTAATATAGCTGAAAGAGCCAGTGGCCTGGAGTAGAACTTCGCTATAGCCCGCTATATGAAACCCATCTAAGTCGGACTGCCCTTGTCGCGCTTCAGGGAGTAGTCGATATCTCTCAGCTTTAAGATAGCATCCAAACGCCCCGGCTGCCTCTCCCTAACTCTATTTTTCGTCGGGTGTGTAGTAATACACTGTGACACCTGAAAATAATGCCATTGTCAATCTATATAATGTATGACGGCCACCTCAGCACGCATTGGCTCTCCAGCCTTTATGATGAGTCGGAGATAATGTTACTCAGCCACGTCACACCAGTGTAGTCAGAAGCAATCGTGGCACGAGCCTATTCCCCGGGATTTTCCGCGCCGATAATCCGGTGCGTGCGGAACATCCGGTGACGAAATACGAACGTAAAGTTGTGTATCATTCAGACCCGCCATCTACTAGGCCTGATTGCCGTCTCGTATACGAGTCAGAGTCCGCCTTCTGCTAACTAGTCACTTACGCTGTATATATACTGGATGCTGAGTACCTTGGTTGGGTTACTTGGGCGCTACAAGTTAACGATTATAGTGCCTTAGGAGGGATGTAACACACAATCGTGCGTTTCGACGCGCCAGGGAACTCGTTAATGCACTACAATGCGCTTCTGTGATGACAGTCGATACGAGACCCAAACTTCCACAGTGTAAACCTTAGAGGGTTACTCCCTTGCACCCCAATCCCTGTGTACACCCGTGGTATGCAGCCGCCCTACCACCGACCAGATTGATATTCGTATCCTATCGCTGGCTGCCATGCTACGTAACACCGAAACGACAAACTCTTTCTCGATCGAAGCCCGTTACTCGTGGATGTATGTATCTGTTGTCCTCGGTGCCAAGAGGTCAACAGGTTGCGGCCGCAATACTCTTGCCGCCGGCTAGGGTTGACCGAAAATACGAATCCGTGTTACGTTTAGACCTAACTCCCTGCAATACTGTACTCTCGGCTAATATAAAACTAACGGCGATTCAAGAATAAAAACGGCCCTATAAATGTTTTTGCCCGTTCCGACCTTTCAGAGTCTCTCAAGCGTAACATTATACGGCGACTGTGGATGGTAGCATCCGAGTGTTTTTCCCGGATATCTGTTCTAAGCTGAGGGTCGATATAGTTGTCCCAACTACTGGACTCATAGACGCGACACATCGGCAGGATCGCTAAAGGTGCACTGATGCTTAGTACCCGACTAGGGCCGGCGTGCGACTGCAGCGCCGTTAACCGACCGGTATATTCCCTTAAACTATGCATAAACATAACATTCTCTATATTGAGGCTGTCCCAGAACGGGGCGGGTACATGCTGTGAGGAGTGCACCCTATCGCGGGCACGCTCGGCGAACACCCTACCAAGCGCGCCCGCGATTTTTGCCTGCGCGGCTCCGGAGAAGCATATCGTTAGAGAGTAGGCTACCCTCCGACACAGCGCCATCTTGGACTCTCGTGACTAACGAGGCTGCGGGGACTAAATGTGTTCCGAATACCAGTCAGGGTGCTGCTTGAAGCTCGTTTACCTAGCCGTCAACACTATCCCACTGTGTTCCATCATATAGCCAAGACCGTACCAGATCTATTCCTGATAAATATATCTGGGTTTCCTGGTGACCAAAAAGATAGTGAGCCCATAAGTTCCTATCCGTCAACCGATAAATGTAGTGCCTGCTCGTAAGTATAATTCATGTGATCCAGATATCCGATAAGTCACTACTCTACGAAAGGGCTTCGCCGACTAGAGATTCGATTGTATTCGGATATCAGGCCAGACGGACAGGGTTACTCCCAGAACGAAAACCCCCGTTTTGTTTTAGTCTATGACGAAAACCGCAATAACAGAAATTCGCGTTGAAACAATTTACCGTGTTATCAGGTCGTGCTTATGTTAACTTTAACATTACGAATCTACCCGCGTTGCCGCATCTATTCGGCAGTGAGTTGGAAACTAATTGGAATGGTCGCACCGCGACCGATTCCTAATTATCGCTTGTCAGAAGTAAACGGATAGCCTAGACCGCTATGATAAGCAGAGGTAGACCCGAGGTGCAAGCGAAGGGGTCAACGACGCTACGAGGTTGAAAAGGTTTTCCCGCCTCAACTGCTTTTTCAGAGCAGACTTCCGGCGCTAATGGATGTAAAATTGGAACATGCGGGTCTTCCGTGCCAGTGGGATTAATTACTAGCCATCATAGCCCGTTCACACGGGCCCCATTATAGTGTGAACGCTGAATGCCAAATCGGGTTGCATGGTTCGGGGACCATCTGAGATGACAACATTTAGCTGCTAGAAGAGTCATTATATACCCAGGATGCAGAGCATATCCACTCTTATAGTCGACCTAAGTCTTGCGGCTCAACTATGATTGTCGCACATTGAAGCGACTCTTACGGAAGATGATTCACGTAAAGATCGAAACCAAAGTACCGTACTATCTTGATGGGAATCCTCGCACTCCTTGTGATACCGCATATACACACGCTCAGGACCATTTAGTATCCAATCAAGGTACTAGAATCCACTGGAGAGCCTTCAGGTCTCTGGGCACGAGAAGCCGTTTATTGACAGAGGCCAACAACGCATCTTAGGGATCGATTGGTTGTGCTTGATGGTACATCTACACGAGACCGTTGGCCCAGCAAAAAATTTGAATTACCGGGTACCCTAGACACAAGGCTTGTAAGAAGGGGCAAAGAGGGAGGTCACCGTTCACGATCCCGTAATACGCTTCCAGTTGCACTAGCATCCGGATGCATTCGCAGCAACTTCGTAGGTCCGAAAGGCTGGTTACAGCCCAGATGGAGCTTGGAAGCTGGTGAGTTGATCCCTGAAAATGTAAACAGTTAGTTCGGGATGGAACTTTAGAGCGTTTGCTATGCAGTCAAACTCAGGTTAGACTTCCCGGCTCATTAGGTCCACACGGAACCGGACGCCATACTACCGATCGTCAGCTGCAAATCCAATATTGGGTGATAAATACGACTCGACGCAATAATCAATCTGCACAAGCAGTTAGCCAACTGAACGGGACACTAATTAACAACCTATTCGAGCTACATTAAGGGCTCCTAATGAAACAAAGACGATAAACAACTAGCATCTAGAATATTCCTGTCACTGCACAATGCTGTCTGTCTAACGCATATGCACAGCATCTAGGCCGAGTGAACCAACCGGAAATATTAGCTTCTGAATCAAGATCTAGCGAATGCCTGCAGCGCGTGGCGGATTGTAGACTTGCCAACAGAATAATATCATGGCTCCACCTTGTGCGGACGGAGGTACTTAATGTATCCAAGTAGCGCGGGCACCGACTCCAACCTCTTACGACAAACCGTTCCAGGTTTCGAGAGTCAACAGAACTTCGATTGCAAAAGGAGGAATTAGAGCCACTGGGAATCCGATACGAGAACTACTAGGGGGTTAATGCGGGTGAAACGAGCTTCCACACGATAAGTCCACTTGTACTATTACCATCGTACACGGGAATAAACAACCATGAGGGGTCTCTCCAAGCCCATTTTCGCGTCCATGACGGCGGTGCTACCCCCGTGCAGCCTCTTCATGCAGTAGAGTTTGGTTCGTTTGAGATTCCGAGGTTAGAGGACAAAAGGAGCCACGTCTCGTTCCGATTCAGGCTAGATTTGAGATCAGTTGCGAAGCCGCGATTCACTAAGTTCAACGTGAAGAAGCACATTGGGTGCCTGTCAATGTGACCTACCCACGCGCCCGCTTCGTTACCCAATTCATTATTGTGTGCAGCGTACCCTATAAGTTGCGAGAAAAGTGGTTAATTTATAAGACATCTTTCTACCTCCCTAACGACGACCGAGAAACATCCGACCGAATTCATGTCTTGGTATTTAGACTAGTTAACATTTAGCGCCTGTTGCATCATTACACAGGCTCCAGTCTTGGTAAGCACCCTAACTAAGACAGAAGCAAATGCAAAAGCATGCGATGCTGGCGTGATACGACTCAACACCCTAAGCATATGTATGATGTAGTGCATAACATATCCACGAACGGGGCACTTTGGGATTTACGTATTGAGATACGTTTGAGGTACAAAGAATACTAGACTTAAGTTATAAGAATCATAAACACCATATACAAGGAGACGCCGCGCGAATATCTTGAGAGGCTAGCCGCCTTGCCACGCCGGGGGCCCTCACCAATAAACTCTCGGCTCTAGAAATCGCAGTGTTTAGCTTCGAAAGCGCGCCCATGCATAGGTAACATGGCAACCAATATAGAAACCGTAGGGAGATGTAGCCGCGACTCCCGATATAAACGGTTGGGCGGAATCCGGCAAACCTACTTCAGGACAAAAGGTGCTCGGTGTCAAGCGCGTTTGTCCTCTTTAGCCCTATAAGTTTAGATCCGGCAGGAAATCTGTCCTACTTTTACCTGATCTGAGCCACACTTTGCACATAGTATTATCAACTCTGCCGTGCGATCCAGGTCAAAAACCGCAAGCTTACGGGGCCTAGGCCACTCCTCTAACTATATAGCCGTTTTTGCGCATTAGTGAACTGGCAGACAGGTCGGTGGGATCTGACACAGAGGCTGTGCAGCAGTCGGCATATAGCTAGTCCATTAAATCTCTGCCCTAACACACTTATGTCTCCCCACCAAGAACCTATCGCGGCGAAGGGGCTTAGTGGTTCAATTCACTCGCGTATAGTCTCCTACTTAACGGCCTTATTTACCTCGGTCTCGTTAATACCGCCGTAAGCGAGATTCATTGTGAGGGACAAGGAAGGGGCCAAGCTTAGGTGGTGCGGGACGAGAAAAATCGGTAGCGCTGCATAAGTTGGACTCTCCCGGGTATGTTCGTTCGTCGTCCGATCTACTGAAAAGCGACAGACCGTCAGATCCCGATTGGAAATCCACAGCCAAAACACTTGTAGTTTGGGGGCCATAGAGTAAGCTGAACACCATGTACATAACAAGCCGATCGACTGTTTTTTTATGCGGAACCCTGCAGGGGGCGAGAGTTATTGACGCCTTTTTCCGCATTGGGGGGTTGATCGTCTATGGGTTTGACATCGCCCTGAGGCCGCCGGAGCAATTGCGCATGACCTTTGTGTTCTTCTATACGAGTCCTACGCACCTCTACCCTCACTTAACCTACTCCCCGGACTGGAATGATGTCCTCCTTCCCATGGCTTATACACCAAGGGAGTCACCATTGACCTAACAATTCGGAACAAAAGTCGCACAGAAGCTGGTGAGTCTTGGAGCGAAGTGGCTGTATCTACAAATAACTCCAACAGCTGATGGGCGGTCCAAAGCACCAAGTGGAGCTAGCACACACCGACGTGTTGTATGCTAAGACGAGCGTTAAATCGCCGCTAGCCGGACCCTGAGCGGGGACTAGTTGGGCACGACTAGCTTAGTAAAACGTAGTGGACCGATAGCTTATCATTTTACACCGGATCGACTGTAACGGCTGGGAATAACGTCCAATTTCCGCTATGGTCCTTAAGCTACTCCATTGCTGTCAATTGCGGTCTATTCGTCGGCGAGCGTCCTCGTATCAACCCGGGCTCTTGTCTACGTCATTAGATTGGTGACTCCTTCACGCCACGTGAAGCGAAGCCACGTCTGCACTTTATATCGGACAATCTCAGGGGCACCTGACGAACCTTGGGAAATATGGACTAAGTAAACAACTAGGCGTCGATCCGGTTTGATTCCCTTTACCTACTACGCTCGGTCAGGGAATACTGACAAAATCTTGAATAACAACTCTTGAATGGTGACTGCCTTTGCAAGACGCCGCCAGATGCCCATCGGATCCGGTGGTGTCGGACGACGGATAATCGAAACAACATGAGCACGACCTGCCGGTCAGGAGCAAAATCGTCCTCATATGGTTTACTTGTTCGTGAAGCCCATCTACAGACCATCTCGCGTTACGCTGACGAGTCGCAATCGCAAGATTCAAACGCTTGTGATACCATTATACGGCACGGAGTGATCTATGTAATGGTCTAGGGGCCGTGGGATTCCTATTAGGATACGATGGCTAGACTACAGTCTAAGACGGGCCTCATATTGTCGTTTATGCACTTACGCCTCAGTGTACAGAGTTTGTCCTTAGGTTCTACAGGGGGTATTTTACTGCGGCTGAGGGTATTGGTCGGCGCCCGGGTCGGCTGGTAAAGCTCCTATGTCGATACCCGTTATCGCCGTTATCTCCACTCATGTATTGGAAAGGGCATCACGATATAAGGTACCGCCTGGTAAGGACGGTTTCACCGTGCATACCTATGGCCAAGATAGTTCAGAATAATTACAATATAGACTGTAACCGTACGCCGCACTTTAGGAGTAGTGAGGTTGGGCAAAGGGAGCATTGATCGGGATTAATTCACGGATGTCTGCCCTACGGTCATTAGTGGTTTTTGATGACCAGTACACCCGGATATGTCGTTTACCATGTAGGAGGCGATAGTGACTCAAAGTTTGTACTGATTTGGGGCAGTAACTGAGGTAGAAGGTGGGAAAAGGCTTCAGTAGTACTCGGTACAAATAAGTTCAAGTGAATCCAGATCCTTCAGTCAGTACAGTTGCTAGTTGAACCTAAATTGCGTTTGACCGCGTGAGGTTCTTGTTGAATTCTTGACGGGTGAGTTCCACGTGGCTCCCGATAAGCTGAGTGTGTACCAACTGACGCAGTAGCACGGTCGATCGCGATTCCAAACGGGGGTTCACCACCAGACGGCTGATTGCGTTGTTCGCTCTTAGGGAACATCTAAATAACTCAGCTGTGACGGCTCAAGTTTTAGCTACACCCACCGTAGGCCTCAATCGTGTAGGGCATGCATGATGGGGTTGGAGCCCCCAAGACAAGCTTGGGGATGGGGCCGGCCCTATTATATGACGAACAGTCCCGCCGCCAACGCCCGATCAATACTCGGAGTTCAGTCTCAGTCGATAAGCGGAGAGTGTGGCGCTGTCAATCAGCCAGAGATTAGGTACTGTGAACAATTCGACGTTCTTGATACATAACGGACTAGAGATTCGGCCTTGAAATGTCACTATCACTTGGTTTCTGATCTAGGTGATTGTGGACCGGGCCCGGGGAGCTAAGAAGAGCCCCATCTCCATGATGAGCCTGCCGTCCAGGGATCCGCTCGCTGATCACTTATGAGGGCATCTAATTCTTGGCTCGTTTCCTTGGAATCGGGCGTGATCACTTAGCCAGCGGATTGACTCCGCATTGTGGTTCACGGGGGGACCGCTTCTCCGACTGTATACCAGCTGAGCAAATTCAAGGGGGTCGACCCGAATAGAGAACCCCCACCAGTAGGTTGACTACAGTCGTCCACAATCTAACTATGCGAGAAGACTCGGTGCAACGTACACCTTAAACACATTCACACATATGTCTAAGCCTGAACCTGACCTGACTGATATCGGCACTGTACGTTGCCACTGTGACAATCTGTGCTGCTGCTCGTTCGCGAGGCGTGAAATGCGCCATGATACTCGGTCGAACGTGTTGGCTCCACTATTGTGCTCTTTGTTACCAGGCGGTGCCATTTTTCCTGAGGAATACACAAGTCGTGCGACCACTGTATCGTTTGGGGGCATCTTTTACCGAATGCCCGTGTCGATACTCGACGGACACTTTTGAGCCGATACAACCGATACGGAAGCCAACTCTGCGTTGCAGCCAGAATCCGTACGGAACATGAATGCAACCTCGCTCAAATATTTATATATGGTTTACTGTGTCTTGGAGTAGGGCCCAGTCAGTGAAGATCACTCCGGAGACAGCCGCCGTAAAGGCTAACCTGATCGTGTCGGTGGGAGACCTCACGGGACCGGAGTGGTAAGCGTCCCGACTAAGGACTGTTAGAACGAGCTGTCGCGGCAGCAGCGCTGAAGACTTGTTCGGCTATTACAGTCATTAACTCTGGTACCATCGACGACTCGTCCATATACAGGACTCTATTGCTTGAGCAAGAGGTACCCTACAGGTGGGTTCGTCCGTTAACAGTATCATGTGTGAGACTAAGCGACATGCTATGGATCGAGATGCTACTTGGCTCTCGAAGATTTCGGTCGGTTGGCCTGAATGGCATCCGCGGTACAGCCCAGGTGGTGAGTCGTTGACCGCTACGCATAATAGGCACGTGGGAATTCCCTCTAAATACGAGTGCAAGAATACAGTCACCGCGCGTAGACGTCTGATGTTTCGTCGGAGACGCGTCTCGCGTCAGATATCCACGGCGACTCTCGATTAGTAGTGGAGAGTAGGACTCAAAGCCACCCTGCACAATCGCGACTCATATTGTTAGGTAATAGCAAAAGTCTACATGTTTATCATGAGGAGAGGGTCCAGGCGGATCTAAATGTAAGAACTTGGACGCGTATACTAAACCTCCTCCAAGTCCAAACTAGTCGAATAGGTCACCAAGAGCCTCTGCAGGTGACCAACCCTTGCGATCACATCTACTGATCTCTTATCGGGCGGTCTATTAGGATGCATTCGGTAACACCTTAACCGATTGACGAAGACCGAAATTGCCCGGGTGTTCGTAAACCGGCCCGTGCTGGTCCAGGCACACGTAACGGGTTAAAGCGGCCGCATTTGCGCGAACAGCCTGAATACTGTGTGCAATAGATTAATCAGCGGCTATGTAGGTAGCCTCAGCACCCATGAATGGTACAGAATTCGACTAGCCAACATAGGTCGCAAGGCACACGAGTATGCGTGAAGCAGGGGGTTGTCGGGAAATGGTCGTCACAGAATTGAGCTTACGGGATCAGCTCGGCTGA'
    print(f'len = {len(baseseq)}')

    seq = baseseq[:nbp] 
    
    test_partials(seq)